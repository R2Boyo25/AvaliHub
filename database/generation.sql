-- MySQL Script generated by MySQL Workbench
-- Fr 05 MÃ¤r 2021 16:24:15 CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema avalihub
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema avalihub
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `avalihub` ;
USE `avalihub` ;

-- -----------------------------------------------------
-- Table `avalihub`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`user` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `password` CHAR(60) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `emailValid` TINYINT NOT NULL DEFAULT 0,
  `createTime` DATETIME NOT NULL DEFAULT now(),
  `lastUpdate` DATETIME NOT NULL DEFAULT now(),
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `avalihub`.`upload`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`upload` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`upload` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `type` ENUM('image', 'video', 'gif') NOT NULL,
  `uploadBy` INT UNSIGNED NOT NULL,
  `location` VARCHAR(150) NOT NULL,
  `description` LONGTEXT NULL,
  `createTime` DATETIME NOT NULL DEFAULT now(),
  `lastUpdate` DATETIME NOT NULL DEFAULT now(),
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `fk_upload_user_idx` (`uploadBy` ASC),
  CONSTRAINT `fkUploadUser`
    FOREIGN KEY (`uploadBy`)
    REFERENCES `avalihub`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `avalihub`.`tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`tag` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`tag` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `avalihub`.`uploadHasTag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`uploadHasTag` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`uploadHasTag` (
  `uploadId` INT UNSIGNED NOT NULL,
  `tagId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`uploadId`, `tagId`),
  INDEX `fk_upload_has_tag_tag1_idx` (`tagId` ASC),
  INDEX `fk_upload_has_tag_upload1_idx` (`uploadId` ASC),
  CONSTRAINT `fkUploadHasTagUpload1`
    FOREIGN KEY (`uploadId`)
    REFERENCES `avalihub`.`upload` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkUploadHasTagTag1`
    FOREIGN KEY (`tagId`)
    REFERENCES `avalihub`.`tag` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `avalihub`.`comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`comment` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`comment` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `commentBy` INT UNSIGNED NOT NULL,
  `text` LONGTEXT NOT NULL,
  `upload` INT UNSIGNED NULL,
  `comment` INT UNSIGNED NULL,
  `createTime` DATETIME NOT NULL DEFAULT now(),
  `lastUpdate` DATETIME NOT NULL DEFAULT now(),
  `active` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  INDEX `fk_comment_user1_idx` (`commentBy` ASC),
  INDEX `fk_comment_upload1_idx` (`upload` ASC),
  INDEX `fk_comment_comment_idx` (`comment` ASC),
  CONSTRAINT `fkCommentUser1`
    FOREIGN KEY (`commentBy`)
    REFERENCES `avalihub`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkCommentUpload1`
    FOREIGN KEY (`upload`)
    REFERENCES `avalihub`.`upload` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkCommentComment1`
    FOREIGN KEY (`comment`)
    REFERENCES `avalihub`.`comment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `avalihub`.`userLogin`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `avalihub`.`userLogin` ;

CREATE TABLE IF NOT EXISTS `avalihub`.`userLogin` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `loginBy` INT UNSIGNED NOT NULL,
  `createTime` DATETIME NOT NULL DEFAULT now(),
  PRIMARY KEY (`id`),
  INDEX `fkUserLoginUser1_idx` (`loginBy` ASC),
  CONSTRAINT `fkUserLoginUser1`
    FOREIGN KEY (`loginBy`)
    REFERENCES `avalihub`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `avalihub` ;

-- -----------------------------------------------------
-- procedure addUser
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`addUser`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `addUser`(IN `username_input` VARCHAR(45), IN `name_input` VARCHAR(100), IN `password_input` CHAR(60), IN `email_input` VARCHAR(100), OUT `id` INT UNSIGNED)
BEGIN
    INSERT INTO `user` (
		`username`,
        `name`,
        `password`,
        `email`
    ) VALUES (
		`username_input`,
        `name_input`,
        `password_input`,
        `email_input`
	);

    SET `id` := (SELECT LAST_INSERT_ID());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addTag
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`addTag`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `addTag`(IN `name_input` VARCHAR(45), OUT `id` INT UNSIGNED)
BEGIN
    INSERT INTO `tag` (
		`name`
    ) VALUES (
		`name_input`
	);

    SET `id` := (SELECT LAST_INSERT_ID());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`addUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `addUpload`(IN `name_input` VARCHAR(100), IN `type_input` ENUM('image', 'video', 'gif'), IN `uploadBy_input` INT UNSIGNED, IN `location_input` VARCHAR(150), IN `description_input` LONGTEXT, OUT `id` INT UNSIGNED)
BEGIN
    INSERT INTO `upload` (
		`name`,
        `type`,
        `uploadBy`,
        `location`,
        `description`
    ) VALUES (
		`name_input`,
        `type_input`,
        `uploadBy_input`,
        `location_input`,
		`description_input`
	);

    SET `id` := (SELECT LAST_INSERT_ID());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addComment
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`addComment`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `addComment`(IN `commentBy_input` INT UNSIGNED, IN `text_input` LONGTEXT, IN `upload_input` INT UNSIGNED, IN `comment_input` INT UNSIGNED, OUT `id` INT UNSIGNED)
BEGIN
    INSERT INTO `comment` (
		`commentBy`,
        `text`,
        `upload`,
        `comment`
    ) VALUES (
		`commentBy_input`,
        `text_input`,
        `upload_input`,
        `comment_input`
	);

    SET `id` := (SELECT LAST_INSERT_ID());
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure verifyEmail
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`verifyEmail`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `verifyEmail`(IN `id_input` INT UNSIGNED)
BEGIN
    UPDATE `user`
    SET `user`.`emailValid` = 1
    WHERE `user`.`id` = `id_input`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editUser
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`editUser`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `editUser`(IN `id_input` INT UNSIGNED, IN `username_input` VARCHAR(45), IN `name_input` VARCHAR(100), IN `password_input` CHAR(60), IN `email_input` VARCHAR(100))
BEGIN
	IF ((SELECT `user`.`email` FROM `user` WHERE `user`.`id` = `id_input`) <> `email_input`) THEN
		UPDATE `user`
        SET `emailValid` = 0
        WHERE `user`.`id` = `id_input`;
    END IF;

    UPDATE `user`
    SET `username` = `username_input`,
        `name` = `name_input`,
        `password` = `password_input`,
        `email` = `email_input`
	WHERE `user`.`id` = `id_input`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUser
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getUser`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getUser`(IN `id_input` INT UNSIGNED, OUT `json` LONGTEXT)
BEGIN
    SET `json` := (SELECT JSON_OBJECT(
		'id', `user`.`id`,
        'username', `user`.`username`,
        'name', `user`.`name`,
        'email', `user`.`email`,
        'emailValid', `user`.`emailValid`,
        'createTime', `user`.`createTime`,
        'lastUpdate', `user`.`lastUpdate`,
	    'last_login', (SELECT `userLogin`.`createTime` FROM `userLogin` WHERE `userLogin`.`loginBy` = id_input ORDER BY `userLogin`.`createTime` DESC LIMIT 1),
        'active', `user`.`active`
    ) FROM `user` WHERE `user`.`id` = `id_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUserPassword
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getUserPassword`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getUserPassword`(IN `id_input` INT UNSIGNED, OUT `json` CHAR(60))
BEGIN
	SET `json` = (SELECT `user`.`password`
    FROM `user`
    WHERE `user`.`id` = `id_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure loginUser
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`loginUser`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `loginUser`(IN `id_input` INT UNSIGNED)
BEGIN
    INSERT INTO `userLogin` (`loginBy`) VALUES (`id_input`);

    SET @last10 := (
		SELECT `userLogin`.`id`
        FROM `userLogin`
        WHERE `userLogin`.`id` = `id_input`
        ORDER BY `userLogin`.`createTime` DESC
        LIMIT 10
    );

    DELETE FROM `userLogin`
    WHERE `userLogin`.`loginBy` = `id_input`
    AND `userLogin`.`id` NOT IN (
		SELECT `userLogin`.`id`
        FROM `userLogin`
        WHERE `userLogin`.`createTime` < UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL 2 WEEK))
        AND `userLogin`.`loginBy` = `id_input`
    ) -- Keep the last two weeks
    AND `userLogin`.`id` NOT IN (SELECT @last10); -- Keep at least the last 10 logins
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getTag
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getTag`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getTag`(IN `id_input` INT UNSIGNED, OUT `json` LONGTEXT)
BEGIN
    SET `json` := (SELECT JSON_OBJECT(
		'id', `tag`.`id`,
        'name', `tag`.`name`,
        'active', `tag`.`active`
    ) FROM `tag` WHERE `tag`.`id` = `id_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getTags
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getTags`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getTags`(OUT `json` LONGTEXT)
BEGIN
    DECLARE `done` BOOLEAN DEFAULT FALSE;
    DECLARE `cur_id` INT UNSIGNED;
    DECLARE `cur` CURSOR FOR SELECT `tag`.`id` FROM `tag` WHERE `tag`.`active` = 1;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET `done` := TRUE;
    
    SET `json` := '[]';
    
    OPEN `cur`;
    `cursor_loop`: LOOP
		FETCH `cur` INTO `cur_id`;
        IF `done` THEN
			LEAVE `cursor_loop`;
		END IF;
        CALL `getUser`(`cur_id`, @value);
        SET `json` := JSON_ARRAY_APPEND(`json`, '$', @value);
	END LOOP;
    CLOSE `cur`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure addTagToUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`addTagToUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `addTagToUpload`(IN `upload_input` INT UNSIGNED, IN `tag_input` INT UNSIGNED)
BEGIN
    INSERT INTO `uploadHasTag` (
		`uploadId`,
        `tagId`
    ) VALUES (
		`upload_input`,
        `tag_input`
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure removeTagFromUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`removeTagFromUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `removeTagFromUpload`(IN `upload_input` INT UNSIGNED, IN `tag_input` INT UNSIGNED)
BEGIN
	DELETE FROM `uploadHasTag`
    WHERE `uploadId` = `upload_input`
    AND `tagId` = `tag_input`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure editUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`editUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `editUpload`(IN `id_input` INT UNSIGNED, IN `name_input` VARCHAR(100), IN `description_input` LONGTEXT)
BEGIN
	UPDATE `upload`
	SET	`upload`.`name` = `name_input`,
        `upload`.`description` = `description_input`
	WHERE `upload`.`id` = `id_input`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUserIdByEmail
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getUserIdByEmail`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getUserIdByEmail`(IN `email_input` VARCHAR(100), OUT `json` INT UNSIGNED)
BEGIN
	SET `json` = (SELECT `user`.`id`
    FROM `user`
    WHERE `user`.`email` = `email_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure existsEmail
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`existsEmail`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `existsEmail`(IN `email_input` INT UNSIGNED, OUT `exists` BOOLEAN)
BEGIN
	SET `exists` = 1 - (SELECT COUNT(*)
    FROM `user`
    WHERE `user`.`email` = `email_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure existsUsername
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`existsUsername`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `existsUsername`(IN `username_input` INT UNSIGNED, OUT `exists` BOOLEAN)
BEGIN
	SET `exists` = 1 - (SELECT COUNT(*)
    FROM `user`
    WHERE `user`.`username` = `username_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure removeUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`removeUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `removeUpload`(IN `id_input` INT UNSIGNED)
BEGIN
	UPDATE `upload`
	SET	`upload`.`active` = 0
	WHERE `upload`.`id` = `id_input`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getUpload`(IN `id_input` INT UNSIGNED, OUT `json` LONGTEXT)
BEGIN
	CALL `getUser`((SELECT `upload`.`uploadBy` FROM `upload` WHERE `upload`.`id` = `id_input`), @user);
    CALL `getTagsToUpload`(`id_input`, @tags);

	SET `json` := (SELECT JSON_OBJECT(
		'id', `upload`.`id`,
        'name', `upload`.`name`,
        'type', `upload`.`type`,
        'uploadBy', JSON_EXTRACT(
			IFNULL(
				@user,
                '{}'
            ),
            '$'
        ),
        'location', `upload`.`location`,
        'tags', JSON_EXTRACT(
			IFNULL(
				@tags,
                '[]'
            ),
            '$'
        ),
        'description', `upload`.`description`,
        'createTime', `upload`.`createTime`,
        'lastUpdate', `upload`.`lastUpdate`,
        'active', `upload`.`active`
    ) FROM `upload` WHERE `upload`.`id` = `id_input`);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getTagsToUpload
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getTagsToUpload`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getTagsToUpload`(IN `id_input` INT UNSIGNED, OUT `json` LONGTEXT)
BEGIN
    DECLARE `done` BOOLEAN DEFAULT FALSE;
    DECLARE `cur_id` INT UNSIGNED;
    DECLARE `cur` CURSOR FOR SELECT `tag`.`id` FROM `tag` WHERE `tag`.`id` IN (SELECT `uploadHasTag`.`tagId` FROM `uploadHasTag` WHERE `uploadHasTag`.`uploadId` = `id_input`) AND `tag`.`active` = 1;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET `done` := TRUE;
    
    SET `json` := '[]';
    
    OPEN `cur`;
    `cursor_loop`: LOOP
		FETCH `cur` INTO `cur_id`;
        IF `done` THEN
			LEAVE `cursor_loop`;
		END IF;
        CALL `getUser`(`cur_id`, @value);
        SET `json` := JSON_ARRAY_APPEND(`json`, '$', @value);
	END LOOP;
    CLOSE `cur`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUploads
-- -----------------------------------------------------

USE `avalihub`;
DROP procedure IF EXISTS `avalihub`.`getUploads`;

DELIMITER $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER procedure `getUploads`(IN `skip` INT UNSIGNED, IN `limit` INT UNSIGNED, IN `orderBy` ENUM('createTime'), IN `sort` ENUM('ASC', 'DESC'), IN `type` ENUM('*', 'image', 'video', 'gif'), OUT `json` LONGTEXT)
BEGIN
	DECLARE `done` BOOLEAN DEFAULT FALSE;
    DECLARE `cur_id` INT UNSIGNED;
    DECLARE `cur` CURSOR FOR 
		SELECT `upload`.`id` 
        FROM `upload` 
        WHERE `upload`.`active` = 1 
        AND `upload`.`type` = `type`
        ORDER BY 
			CASE WHEN `sort` = 'ASC' THEN
				CASE
					WHEN `orderBy` = 'createTime' THEN `upload`.`id`
				END
            END,
            CASE WHEN `sort` = 'DESC' THEN
				CASE
					WHEN `orderBy` = 'createTime' THEN `upload`.`id`
				END
            END DESC
        LIMIT `skip`, `limit`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET `done` := TRUE;
    
    SET `json` := '[]';
    
    OPEN `cur`;
    `cursor_loop`: LOOP
		FETCH `cur` INTO `cur_id`;
        IF `done` THEN
			LEAVE `cursor_loop`;
		END IF;
        CALL `getUpload`(`cur_id`, @value);
        SET `json` := JSON_ARRAY_APPEND(`json`, '$', @value);
	END LOOP;
    CLOSE `cur`;
END$$

DELIMITER ;
USE `avalihub`;

DELIMITER $$

USE `avalihub`$$
DROP TRIGGER IF EXISTS `avalihub`.`user_AFTER_UPDATE` $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER TRIGGER `avalihub`.`user_AFTER_UPDATE` AFTER UPDATE ON `user` FOR EACH ROW
BEGIN
	UPDATE `user` SET `user`.`lastUpdate` = now() WHERE `user`.`id` = OLD.`id`;
END$$


USE `avalihub`$$
DROP TRIGGER IF EXISTS `avalihub`.`upload_AFTER_UPDATE` $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER TRIGGER `avalihub`.`upload_AFTER_UPDATE` AFTER UPDATE ON `upload` FOR EACH ROW
BEGIN
	UPDATE `upload` SET `upload`.`lastUpdate` = now() WHERE `upload`.`id` = OLD.`id`;
END$$


USE `avalihub`$$
DROP TRIGGER IF EXISTS `avalihub`.`comment_AFTER_UPDATE` $$
USE `avalihub`$$
CREATE DEFINER = CURRENT_USER TRIGGER `avalihub`.`comment_AFTER_UPDATE` AFTER UPDATE ON `comment` FOR EACH ROW
BEGIN
	UPDATE `comment` SET `comment`.`lastUpdate` = now() WHERE `comment`.`id` = OLD.`id`;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
